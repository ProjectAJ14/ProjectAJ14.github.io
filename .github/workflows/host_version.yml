name: Flutter Web Deploy with Versioning

on:
  push:
    branches: [ main ]
  release:
    types: [ created ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (optional - will use pubspec.yaml if not provided)'
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required for version extraction

      - name: Extract version from pubspec.yaml
        id: get_version
        if: github.event.inputs.version == ''
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version extracted from pubspec.yaml: $VERSION"

      - name: Set manual version
        if: github.event.inputs.version != ''
        run: |
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          echo "Using manually provided version: ${{ github.event.inputs.version }}"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Build Flutter Web
        run: flutter build web --release --base-href "/${{ env.VERSION }}/"

      - name: Setup Git Config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      - name: Deploy to GitHub Pages
        run: |
          # Create a temporary directory for the gh-pages branch
          mkdir -p tmp
          cd tmp
          
          # Clone gh-pages branch
          git clone --single-branch --branch gh-pages "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" gh-pages
          cd gh-pages
          
          # Create version directory and copy new build
          mkdir -p "${{ env.VERSION }}"
          cp -r ../../build/web/* "${{ env.VERSION }}/"
          
          # Create or update version list
          echo "# Available Versions" > versions.md
          for d in */ ; do
            if [[ "$d" =~ ^[0-9]+\.[0-9]+\.[0-9]+/$ ]]; then
              version="${d%/}"
              echo "- [$version]($version/)" >> versions.md
            fi
          done
          
          # Stage, commit and push
          git add .
          git commit -m "Deploy version ${{ env.VERSION }}"
          git push

      - name: Deployment Status
        run: |
          echo "Successfully deployed version ${{ env.VERSION }}"
          echo "Access your app at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ env.VERSION }}/"