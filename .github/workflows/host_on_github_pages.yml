name: Host on GitHub Pages with Versioning

on:
  push:
    branches: [ release ]
  release:
    types: [ created ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (optional - will use package version if not provided)'
        required: false
        type: string

env:
  FLUTTER_VERSION: '3.27.3'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Setup Melos
        run: |
          dart pub global activate melos
          melos bootstrap

      - name: Run tests and lint
        run: |
          melos run lint
          melos run test

      - name: Extract version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            cd apps/portfolio
            VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //')
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
          fi

      - name: Build Flutter Web
        run: |
          cd apps/portfolio
          flutter build web --release --base-href "/versions/${{ env.VERSION }}/"

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3

      - name: Deploy to GitHub Pages
        run: |
          # Clone gh-pages branch
          git clone --single-branch --branch gh-pages "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" gh-pages || {
            # If branch doesn't exist, create it
            git checkout --orphan gh-pages
            git rm -rf .
            mkdir -p versions
            echo "# Versions Directory" > versions/README.md
          }
          
          cd gh-pages
          
          # Create versions directory if it doesn't exist
          mkdir -p "versions/${{ env.VERSION }}"
          
          # Copy new version
          cp -r ../apps/portfolio/build/web/* "versions/${{ env.VERSION }}/"
          
          # Update versions index
          cat > versions/index.html << EOL
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Available Versions</title>
              <style>
                  :root {
                      --primary-color: #2563eb;
                      --background-color: #f8fafc;
                      --text-color: #1e293b;
                  }
                  body {
                      font-family: sans-serif;
                      background-color: var(--background-color);
                      color: var(--text-color);
                      padding: 2rem;
                  }
                  .container {
                      max-width: 800px;
                      margin: auto;
                      background: white;
                      padding: 2rem;
                      border-radius: 8px;
                      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                  }
                  h1 { text-align: center; margin-bottom: 2rem; }
                  table { 
                      width: 100%; 
                      border-collapse: collapse; 
                      margin-top: 1rem;
                  }
                  th, td { 
                      padding: 1rem; 
                      text-align: left;
                      border-bottom: 1px solid #e2e8f0;
                  }
                  th { 
                      font-weight: 600;
                      background-color: #f8fafc;
                  }
                  tr:hover { background-color: #f8fafc; }
                  a { 
                      color: var(--primary-color); 
                      text-decoration: none;
                  }
                  a:hover { text-decoration: underline; }
                  .latest-badge {
                      background-color: #22c55e;
                      color: white;
                      padding: 0.25rem 0.5rem;
                      border-radius: 9999px;
                      font-size: 0.875rem;
                      margin-left: 0.5rem;
                  }
              </style>
              <script>
                  function formatDate(utcString) {
                      const date = new Date(utcString);
                      return date.toLocaleString();
                  }
                  window.onload = function() {
                      document.querySelectorAll('.timestamp').forEach(el => {
                          el.textContent = formatDate(el.getAttribute('data-utc'));
                      });
                  }
              </script>
          </head>
          <body>
              <div class="container">
                  <h1>Available Versions</h1>
                  <table>
                      <thead>
                          <tr>
                              <th>Deployment Date</th>
                              <th>Version</th>
                          </tr>
                      </thead>
                      <tbody>
          EOL
          
          # Add new version entry
          DEPLOY_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "<tr><td class=\"timestamp\" data-utc=\"${DEPLOY_TIME}\"></td><td><a href=\"${{ env.VERSION }}/\">${{ env.VERSION }}</a><span class=\"latest-badge\">Latest</span></td></tr>" >> versions/index.html
          
          # Add previous versions (if any exist)
          for version_dir in versions/*/; do
            if [ -d "$version_dir" ] && [ "$version_dir" != "versions/${{ env.VERSION }}/" ]; then
              version=$(basename "$version_dir")
              if [ "$version" != "index.html" ] && [ "$version" != "README.md" ]; then
                deploy_time=$(git log -1 --format="%aI" -- "$version_dir" || date -u +"%Y-%m-%dT%H:%M:%SZ")
                echo "<tr><td class=\"timestamp\" data-utc=\"${deploy_time}\"></td><td><a href=\"${version}/\">${version}</a></td></tr>" >> versions/index.html
              fi
            fi
          done
          
          # Close HTML
          cat >> versions/index.html << EOL
                      </tbody>
                  </table>
              </div>
          </body>
          </html>
          EOL
          
          # Copy latest version to root
          cp -r "versions/${{ env.VERSION }}"/* .
          
          # Commit and push changes
          git add .
          git commit -m "Deploy version ${{ env.VERSION }}"
          git push origin gh-pages

      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Successfully deployed version ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“± Latest version: https://${{ github.repository_owner }}.github.io/" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“± Versioned URL: https://${{ github.repository_owner }}.github.io/versions/${{ env.VERSION }}/" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“‹ All versions: https://${{ github.repository_owner }}.github.io/versions/index.html" >> $GITHUB_STEP_SUMMARY